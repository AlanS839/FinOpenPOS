/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Je6oEbcnbAE
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Rethink_Sans } from 'next/font/google'
import { Archivo } from 'next/font/google'

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

archivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuCheckboxItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import Link from "next/link"
import { Pagination } from "@/components/ui/pagination"

export function Products() {
  const [searchTerm, setSearchTerm] = useState("")
  const [filters, setFilters] = useState({
    category: "all",
    inStock: "all",
  })
  const [currentPage, setCurrentPage] = useState(1)
  const [productsPerPage] = useState(10)
  const products = [
    {
      id: 1,
      name: "Gamer Gear Pro Controller",
      description: "High-performance gaming controller",
      price: 59.99,
      inStock: 100,
    },
    {
      id: 2,
      name: "Luminous VR Headset",
      description: "Immersive virtual reality experience",
      price: 199.99,
      inStock: 50,
    },
    {
      id: 3,
      name: "TechTonic Energy Drink",
      description: "Refreshing energy boost",
      price: 2.99,
      inStock: 1000,
    },
    {
      id: 4,
      name: "Laser Lemonade Machine",
      description: "Futuristic lemonade maker",
      price: 499.99,
      inStock: 25,
    },
    {
      id: 5,
      name: "Hypernova Headphones",
      description: "High-fidelity audio experience",
      price: 129.99,
      inStock: 75,
    },
    {
      id: 6,
      name: "AeroGlow Desk Lamp",
      description: "Sleek and energy-efficient lighting",
      price: 39.99,
      inStock: 200,
    },
    {
      id: 7,
      name: "Zest Juicers",
      description: "Healthy juice extraction",
      price: 79.99,
      inStock: 100,
    },
    {
      id: 8,
      name: "Flexi Wearables",
      description: "Comfortable and stylish fitness trackers",
      price: 49.99,
      inStock: 150,
    },
    {
      id: 9,
      name: "Glimmer Lamps",
      description: "Ambient lighting for any space",
      price: 99.99,
      inStock: 75,
    },
    {
      id: 10,
      name: "Aqua Filters",
      description: "Advanced water filtration system",
      price: 129.99,
      inStock: 50,
    },
  ]
  const filteredProducts = useMemo(() => {
    let filtered = products.filter((product) => {
      if (filters.category !== "all" && product.category !== filters.category) {
        return false
      }
      if (filters.inStock !== "all" && filters.inStock === "in-stock" && product.inStock === 0) {
        return false
      }
      return product.name.toLowerCase().includes(searchTerm.toLowerCase())
    })
    return filtered
  }, [searchTerm, filters])
  const indexOfLastProduct = currentPage * productsPerPage
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage
  const currentProducts = filteredProducts.slice(indexOfFirstProduct, indexOfLastProduct)
  const totalPages = Math.ceil(filteredProducts.length / productsPerPage)
  const handlePageChange = (page) => {
    setCurrentPage(page)
  }
  const handleSearch = (e) => {
    setSearchTerm(e.target.value)
    setCurrentPage(1)
  }
  const handleFilterChange = (type, value) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      [type]: value,
    }))
    setCurrentPage(1)
  }
  return (
    <div className="flex flex-col gap-6 p-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <div className="relative">
            <Input
              type="text"
              placeholder="Search products..."
              value={searchTerm}
              onChange={handleSearch}
              className="pr-8"
            />
            <SearchIcon className="absolute right-2 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="gap-1">
                <FilterIcon className="w-4 h-4" />
                <span>Filters</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuLabel>Filter by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuCheckboxItem
                checked={filters.category === "all"}
                onCheckedChange={() => handleFilterChange("category", "all")}
              >
                All Categories
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.category === "electronics"}
                onCheckedChange={() => handleFilterChange("category", "electronics")}
              >
                Electronics
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.category === "home"}
                onCheckedChange={() => handleFilterChange("category", "home")}
              >
                Home
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.category === "health"}
                onCheckedChange={() => handleFilterChange("category", "health")}
              >
                Health
              </DropdownMenuCheckboxItem>
              <DropdownMenuSeparator />
              <DropdownMenuCheckboxItem
                checked={filters.inStock === "all"}
                onCheckedChange={() => handleFilterChange("inStock", "all")}
              >
                All Stock
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.inStock === "in-stock"}
                onCheckedChange={() => handleFilterChange("inStock", "in-stock")}
              >
                In Stock
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.inStock === "out-of-stock"}
                onCheckedChange={() => handleFilterChange("inStock", "out-of-stock")}
              >
                Out of Stock
              </DropdownMenuCheckboxItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <Button size="sm">Add Product</Button>
      </div>
      <div className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Product</TableHead>
              <TableHead>Description</TableHead>
              <TableHead>Price</TableHead>
              <TableHead>Stock</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {currentProducts.map((product) => (
              <TableRow key={product.id}>
                <TableCell className="font-medium">{product.name}</TableCell>
                <TableCell>{product.description}</TableCell>
                <TableCell>${product.price.toFixed(2)}</TableCell>
                <TableCell>{product.inStock}</TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Link href="#" prefetch={false}>
                      <Button size="icon" variant="ghost">
                        <FilePenIcon className="w-4 h-4" />
                        <span className="sr-only">Edit</span>
                      </Button>
                    </Link>
                    <Button size="icon" variant="ghost">
                      <TrashIcon className="w-4 h-4" />
                      <span className="sr-only">Delete</span>
                    </Button>
                    <Link href="#" prefetch={false}>
                      <Button size="icon" variant="ghost">
                        <EyeIcon className="w-4 h-4" />
                        <span className="sr-only">View</span>
                      </Button>
                    </Link>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-between">
        <div className="text-sm text-muted-foreground">
          Showing {indexOfFirstProduct + 1} to {indexOfLastProduct} of {filteredProducts.length} products
        </div>
        <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={handlePageChange} />
      </div>
    </div>
  )
}

function EyeIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}


function FilePenIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>
  )
}


function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  )
}


function SearchIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  )
}


function TrashIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}


function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
